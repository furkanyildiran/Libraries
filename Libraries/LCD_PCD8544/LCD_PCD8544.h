#ifndef LCD_PCD8544
#define LCD_PCD8544
#define F_CPU 16000000UL
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <util/delay.h>
#include "SPI_custom.h"

//LCD setting functions
#define Set_func(PD,V,H)(32 | (PD << 2) | (V << 1) | (H << 0))
#define Set_display_mode(DE_bits)(8 | ((DE_bits >> 1) << 2) | (DE_bits & 0b01))
#define Set_temp_coeff(TC_bits)(4 | TC_bits)
#define Set_bias(BS_bits)(16 | BS_bits)
#define Set_VOP(VOP)(128 | VOP)
#define Set_x_addr(x_addr)(0x80 | x_addr)
#define Set_y_addr(y_addr)(0x40 | y_addr)

//LCD functions argument bits
#define chip_active_PD 0 
#define chip_powerdown_PD 1
#define horizontal_addr_V 0
#define vertical_addr_V 1
#define basic_instr_set_H 0
#define extended_instr_set_H 1
#define display_blank_DE 0b00
#define normal_mode_DE 0b10
#define all_segment_on_DE 0b01
#define inverse_mode_DE 0b11
#define temp_coeff0_TC 0b00
#define temp_coeff1_TC 0b01
#define temp_coeff2_TC 0b10
#define temp_coeff3_TC 0b11



#define indis_offset  0x20
#define char_width 0x06
#define char_height 0x08
#define line_0 0
#define line_1 1
#define line_2 2
#define line_3 3
#define line_4 4

const uint8_t characters[91][5] PROGMEM ={
	{0x00,0x00,0x00,0x00,0x00},//space
	{0x00,0x00,0x5f,0x00,0x00},//!
	{0x00,0x00,0x07,0x00,0x07},//"
	{0x14,0x7f,0x14,0x7f,0x14},//#
	{0x24,0x2a,0x7f,0x2a,0x12},//$
	{0x23,0x13,0x08,0x64,0x62},//%
	{0x36,0x49,0x55,0x22,0x50},//&
	{0x00,0x00,0x05,0x03,0x00},//'
	{0x00,0x1c,0x22,0x41,0x00},//(
	{0x00,0x41,0x22,0x1c,0x00},//)
	{0x14,0x08,0x3e,0x08,0x14},//*
	{0x08,0x08,0x3e,0x08,0x08},//+
	{0x00,0x00,0x00,0x50,0x30},//,
	{0x08,0x08,0x08,0x08,0x08},//-
	{0x00,0x00,0x30,0x30,0x00},//.
	{0x20,0x10,0x08,0x04,0x02},//slash
	{0x3e,0x51,0x49,0x45,0x3e},//0
	{0x00,0x42,0x7f,0x40,0x00},//1
	{0x40,0x66,0x51,0x49,0x46},//2
	{0x22,0x41,0x49,0x49,0x36},//3
	{0x18,0x14,0x12,0x7f,0x10},//4
	{0x27,0x45,0x45,0x45,0x39},//5
	{0x3c,0x4a,0x49,0x49,0x31},//6
	{0x01,0x71,0x09,0x05,0x03},//7
	{0x36,0x49,0x49,0x49,0x36},//8
	{0x26,0x49,0x49,0x49,0x3e},//9
	{0x00,0x00,0x33,0x33,0x00},//:
	{0x00,0x00,0x00,0x56,0x36},//;
	{0x00,0x08,0x14,0x22,0x00},//<
	{0x00,0x14,0x14,0x14,0x00},//=
	{0x00,0x22,0x14,0x08,0x00},//>
	{0x02,0x01,0x51,0x09,0x06},//?
	{0x32,0x49,0x49,0x51,0x3e},//@
	{0x7e,0x09,0x09,0x09,0x7e},//A
	{0x7f,0x49,0x49,0x49,0x36},//B
	{0x3e,0x41,0x41,0x41,0x22},//C
	{0x7f,0x41,0x41,0x22,0x1c},//D
	{0x7f,0x49,0x49,0x49,0x41},//E
	{0x7f,0x09,0x09,0x09,0x01},//F
	{0x3e,0x41,0x49,0x49,0x3a},//G
	{0x7f,0x08,0x08,0x08,0x7f},//H
	{0x41,0x41,0x7f,0x41,0x41},//I
	{0x20,0x40,0x41,0x3f,0x01},//J
	{0x7f,0x18,0x14,0x22,0x41},//K
	{0x7f,0x40,0x40,0x40,0x40},//L
	{0x7f,0x02,0x0c,0x02,0x7f},//M
	{0x7f,0x02,0x04,0x18,0x7f},//N
	{0x3e,0x41,0x41,0x41,0x3e},//O
	{0x7f,0x09,0x09,0x09,0x06},//P
	{0x3E,0x41,0x51,0x21,0xde},//Q
	{0x7f,0x19,0x29,0x49,0x46},//R
	{0x46,0x49,0x49,0x49,0x31},//S
	{0x01,0x01,0x7f,0x01,0x01},//T
	{0x3f,0x40,0x40,0x40,0x3f},//U
	{0x1f,0x30,0x40,0x30,0x1f},//V
	{0x3f,0x40,0x38,0x40,0x3f},//W
	{0x63,0x14,0x08,0x14,0x63},//X
	{0x03,0x04,0x78,0x04,0x03},//Y
	{0x61,0x51,0x49,0x45,0x43},//Z
	{0x00,0x7F,0x41,0x41,0x00},//[
	{0x02,0x04,0x08,0x10,0x20},//backslash
	{0x00,0x41,0x41,0x7F,0x00},//]
	{0x10,0x08,0x04,0x08,0x10},//^
	{0x00,0x40,0x40,0x40,0x40},//_
	{0x00,0x03,0x05,0x00,0x00},//`
	{0x20,0x54,0x54,0x54,0x78},//a
	{0x7f,0x48,0x44,0x44,0x38},//b
	{0x38,0x44,0x44,0x44,0x20},//c
	{0x38,0x44,0x44,0x48,0x7f},//d
	{0x38,0x54,0x54,0x54,0x18},//e
	{0x08,0x7e,0x09,0x01,0x02},//f
	{0x18,0xa4,0xa4,0xa4,0x7c},//g
	{0x7f,0x08,0x04,0x04,0x78},//h
	{0x00,0x44,0x7d,0x40,0x00},//i
	{0x00,0x40,0x80,0x84,0x7d},//j
	{0x00,0x7f,0x10,0x28,0x44},//k
	{0x00,0x41,0x7f,0x40,0x00},//l
	{0x7c,0x04,0x18,0x04,0x78},//m
	{0x7c,0x08,0x04,0x04,0x78},//n
	{0x38,0x44,0x44,0x44,0x38},//o
	{0xfc,0x18,0x24,0x24,0x18},//p
	{0x18,0x24,0x24,0x18,0xfc},//q
	{0x7c,0x08,0x04,0x04,0x08},//r
	{0x48,0x54,0x54,0x54,0x20},//s
	{0x04,0x3f,0x44,0x40,0x20},//t
	{0x3c,0x40,0x40,0x20,0x7c},//u
	{0x1c,0x20,0x40,0x20,0x1c},//w
	{0x3c,0x40,0x30,0x40,0x3c},//v
	{0x44,0x28,0x10,0x28,0x44},//y
	{0x1c,0xa0,0xa0,0xa0,0x7c},//z
	{0x44,0x64,0x54,0x4c,0x44} //x
};
static struct                          //LCD_init fonsiyonunun argümalarıyla alınan
{                                      //ddr ve port adresleri ayrıca dc ve rst pin-
	volatile uint8_t *ddr_addr;    //lerinin bitleri diğer fonksiyonlar tarafın-
	volatile uint8_t *port_addr;   //dan da kullanılacağından bu argümanlar glo-
	uint8_t RST_bit;               //bir struct içinde depolanmıştır.
	uint8_t DC_bit;
}LCD;

void LCD_reset(void)
{
	*LCD.port_addr &= ~(1 << LCD.RST_bit);
	_delay_ms(70);
	*LCD.port_addr |= (1 << LCD.RST_bit);
}

void LCD_command(uint8_t command)
{
	*LCD.port_addr &= ~(1 << LCD.DC_bit);
	SPI_master_transmit(command);
}

void LCD_data(uint8_t data)
{
	*LCD.port_addr |= (1 << LCD.DC_bit);
	SPI_master_transmit(data);
}

void LCD_clear_coor(uint8_t x1_coor, uint8_t x2_coor, uint8_t y_line)
{
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,basic_instr_set_H));
	LCD_command(Set_x_addr(x1_coor));
	for(uint8_t i = x1_coor; i <= x2_coor; i++)
		LCD_data(0x00);
}

void LCD_clear(void)
{
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,basic_instr_set_H));
	LCD_command(Set_x_addr(0));
	LCD_command(Set_y_addr(0));
	for(uint16_t i = 0; i < 504; i++)
		LCD_data(0x00);
}

void LCD_contrast(uint8_t contrast)
{
	if(contrast >= 0x7F)
		contrast = 0x7F;
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,extended_instr_set_H));
	LCD_command(Set_VOP(contrast));
}

void LCD_invers(uint8_t status)
{
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,basic_instr_set_H));
	if(status==1)
		LCD_command(Set_display_mode(inverse_mode_DE));
	else
		LCD_command(Set_display_mode(normal_mode_DE));
}
void LCD_init(volatile uint8_t *ddr_addr, volatile uint8_t *port_addr, uint8_t RST_bit, uint8_t DC_bit)
{
	LCD.ddr_addr = ddr_addr;
	LCD.port_addr = port_addr;
	LCD.RST_bit = RST_bit;
	LCD.DC_bit = DC_bit;
	
	*ddr_addr |= (1 << RST_bit) | (1 << DC_bit);
	
	LCD_reset();
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,extended_instr_set_H));
	LCD_command(Set_VOP(80));
	LCD_command(Set_temp_coeff(0x03));
	LCD_command(Set_bias(0x01));
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,basic_instr_set_H));
	LCD_command(Set_display_mode(normal_mode_DE));
	LCD_command(Set_x_addr(0));
	LCD_command(Set_y_addr(0));
	*port_addr |= (1 << DC_bit);
	for (volatile int i = 0; i < 504; i++){
		LCD_data(0x00);
	}
	LCD_command(Set_x_addr(0));
	LCD_command(Set_y_addr(0));
}

void LCD_text(char *data, uint8_t x, uint8_t y)
{
	LCD_command(Set_func(chip_active_PD,horizontal_addr_V,basic_instr_set_H));
	LCD_command(Set_x_addr(x));
	LCD_command(Set_y_addr(y));
	for (int i = 0; *data != '\0'; i++, x+=char_width, data++)//string loop
	{
		LCD_command(Set_x_addr(x));
		for(int j = 0; j < 5; j++)//char loop
		LCD_data(pgm_read_byte(&characters[(uint8_t)(*data) - indis_offset][j]));
	}
}

#endif